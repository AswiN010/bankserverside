Server Creation  -- using express
-_____________________________________________________________________________________-

before all this step installexpress ----- npm i express

first step- is to import express

second step- is to create an appp using express

third step- is to create port number (port number in 3000 series)

fourth step - after the above step we can create request according to your project

then add request app etc

-___________________________________________________________________________________-

angular is worked in 4200 series 

server side in the 3000 series


NODEMON Server
-------------------------
- npm i -g nodemon


USER AUTHENTICATION
________________________________________-

J.w.T token is used for user authentication

To use this we need libary jsonwebtoken  ----  npm i jsonwebtoken
There by we have to import jsonwebtoken -----  const jwt =require("jsonwebtoken")

* sign() method  -- used to generte token ------ const token=jwt.sign({currentAcno:acno},'secretkey123')
        next step is to allow only person with token to do other operation

* verify()      --- method to verify jwt token in project

MIDDLEWARES
------------------------------------------------
middlewares hve the caapcity to control server requests.
its a function with three arguments--> 
 * request
 * response
 *  next -- to complete the middleware

MIDDLEWARE --- HAVE THE POWER TO VERIFY TOKEN.

the middlewafres are of two type
:>>>>
     1, Application Specific middlewares -- all the methods in the project requires 
        middlewares

     2, Router Specific MIddlewares --- specific request only requires middlewares
        (in this projext only middleware is require in deposit and login and login)

Router Specific MIddlewares
----------------------------------------------------------------
const jwtmiddleware=(req,res,next)=>
{
    console.log("roter specific middleware");
    const token = req.body.token
    const data= jwt.verify(token, "secretkey123")
    console.log(data);
     next()
}

how to call middleware
app.post('/deposit',jwtmiddleware, (req, res) => {
    const result = dataservice.deposit(req.body.acno, req.body.psw, req.body.amount)
    res.status(result.statusCode).json(result)
})

HOW TO SOLVE RUN TIME ERROR IN JAVASCRIPT --- use in try - catch
--------------------------------------------------------------------------------------------------------
try  &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& catch

try
 { error causing code in try }
catch
 { solution to the error }

 --const jwtmiddleware = (req, res, next) => 
    {
    console.log("roter specific middleware");
    try 
      {  
      const token = req.body.token
      const data= jwt.verify(token,"secretkey123")
      console.log(data);
      next()
      }
    catch
       {
             res.status(422).json
             ({statuscode:422,status:false,message:"login fisrt" })
       }
    }

/////////////////////////////////////$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$//////////////////////////
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

mongoDB (how to create database)
-------------------
1.collection name should be proual word like users ,admins, persons etc
we should install mongoDB server 
then mongo compass is just for the interface

SHELL COMMANDS in mongoDB
------------------------------------------------------------------------------------------------------------
COMMANDS
1. to see the database                         ----->  show dbs
2. open a database                            ------>  use database_name
3. to view the collections inside the database  ---->  show collections
4.Ton vir=ew the data inside the collections  ------>  db.collection_name.find
5. to view any single data inside a collection ----->  db.collection_name.findOne({data that is identifical in form of object})
6. to insert new data                          ----->  db.collection_name.insertOne({data})
7. to view any single data according to  condition ->  db.collection_name.findOne({conditon})
8. to view any ata according to acondition    ------>  db.collection_name.find({condition})

* DELETE
       1. delete any single data -------> db.collection_name.deleteOne({data})
       2. delete count number   --------> no delete, delete count =0

* UPDATE
       1. to update ------> db.collection_name.updateOne({data to update}),({new data}) 
                                                        ({uname:'anu'})({uname:'anu v'})

crud = create , read , update , delete

Comparison Operators
MongoDB comparison operators can be used to compare values in a document. The following table contains the common comparison operators.

Operator	Description
$eq ====	Matches values that are equal to the given value.
$gt -===	Matches if values are greater than the given value.
$lt ====	Matches if values are less than the given value.
$gte ===	Matches if values are greater or equal to the given value.
$lte ===	Matches if values are less or equal to the given value.
$in ====	Matches any of the values in an array.
$ne  ===	Matches values that are not equal to the given value.
$nin ===	Matches none of the values specified in an array.